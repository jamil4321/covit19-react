{"version":3,"sources":["api/index.js","components/Header/Header.jsx","components/CountryList/CountryList.jsx","components/Cards/Card.jsx","components/Chart/Chart.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","App.module.css","components/Cards/Card.module.css"],"names":["url","fetchContryList","axios","get","error","console","log","fetchData","country","Header","CountryList","handleCountryName","useState","fetchedCountryList","setFetchCountryList","useEffect","a","then","res","data","fetchApi","FormControl","NativeSelect","defaultValue","onChange","e","target","value","map","i","key","Cards","cases","className","styles","container","Grid","spacing","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","active","recovered","deaths","Chart","TotalCases","labels","datasets","backgroundColor","hoverBackgroundColor","options","title","display","text","CasesPerMillion","testsPerOneMillion","casesPerOneMillion","App","state","componentDidMount","fetchedData","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.f2990d89.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst url = 'https://coronavirus-19-api.herokuapp.com/countries/';\n\nexport const fetchContryList = ()=>{\n\n    try{\n        const fetchData = axios.get(url)\n        return fetchData\n    }\n    catch(error){\n        console.log(error)\n    }\n}\nexport const fetchData = (country)=>{\n    try{\n        const Data = axios.get(`${url}${country}`)\n        return Data\n    }\n    catch(error){\n        console.log(error)\n    }\n}","import React from 'react';\n\nconst Header =()=>{\n    return(\n        <h1>\n            Hello From Header\n        </h1>\n    )\n}\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport { fetchContryList } from '../../api';\nimport { NativeSelect, FormControl } from '@material-ui/core';\n\n\nconst CountryList = ({handleCountryName}) => {\n    const [fetchedCountryList, setFetchCountryList] = useState([]);\n    useEffect(() => {\n        const fetchApi = async () => {\n            setFetchCountryList(await fetchContryList().then(res => res.data))\n        }\n\n        fetchApi()\n    }, [setFetchCountryList])\n    return (\n        <FormControl>\n            <NativeSelect defaultValue=\"\" onChange={e =>handleCountryName(e.target.value)}>\n                {fetchedCountryList.map((data, i) => <option key={i} value={data.country}>{data.country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryList;","import React from 'react';\nimport { Card, CardContent, Typography, Grid  } from '@material-ui/core';\nimport Countup from 'react-countup';\nimport styles from './Card.module.css';\nimport cx from 'classnames';\n\nconst Cards = ({ data, country }) => {\n    if (!data.cases) {\n        return 'Loading.....'\n    }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3}>\n                  <Grid item component={Card} xs={12} md={5} className={cx(styles.card, styles.infected)}>\n                      <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                                Infected\n                          </Typography>\n                          <Typography variant=\"h5\">\n                        <Countup start={0} end={data.cases} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\n                      </CardContent>\n                  </Grid>\n                  <Grid item component={Card} xs={12} md={5} className={cx(styles.card, styles.active)}>\n                      <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                                Active Cases\n                          </Typography>\n                          <Typography variant=\"h5\">\n                        <Countup start={0} end={data.active} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\n                      </CardContent>\n                  </Grid>\n                  <Grid item component={Card} xs={12} md={5}className={cx(styles.card, styles.recovered)}>\n                      <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                                Recoverd Cases\n                          </Typography>\n                          <Typography variant=\"h5\">\n                        <Countup start={0} end={data.recovered} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\n                      </CardContent>\n                  </Grid>\n                  <Grid item component={Card} xs={12} md={5}className={cx(styles.card, styles.deaths)}>\n                      <CardContent>\n                          <Typography color=\"textSecondary\" gutterBottom>\n                                Deaths Cases\n                          </Typography>\n                          <Typography variant=\"h5\">\n                        <Countup start={0} end={data.deaths} duration={2.5} separator=\",\"/>\n                        </Typography>\n                        <Typography variant=\"body2\">Number of Active cases of COVID-19</Typography>\n                      </CardContent>\n                  </Grid>\n                  \n            </Grid>\n        </div>\n    )\n}\nexport default Cards;","import React from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data }) => {\n    if (!data.cases) {\n        return 'Loading.....'\n    }\n\n    const TotalCases = (\n        <Doughnut\n            data={{\n                labels: ['Active', 'Recoverd', 'Deaths'],\n                datasets: [{\n                    data: [data.active, data.recovered, data.deaths],\n                    backgroundColor: ['#FF8C00', 'green', 'red'],\n                    hoverBackgroundColor: ['\t#FFA500', 'lightgreen', '#FF7F7F']\n                }]\n            }}\n            options={{\n                title: {\n                    display: true,\n                    text: `Total Cases ${data.cases}`\n                }\n\n            }}\n        />\n    )\n\n    const CasesPerMillion = (\n        <Doughnut\n            data={{\n                labels: ['Tests Per One Million', 'Cases Per One Million'],\n                datasets: [{\n                    data: [data.testsPerOneMillion, data.casesPerOneMillion],\n                    backgroundColor: ['blue', 'green'],\n                    hoverBackgroundColor: ['lightblue', 'lightgreen'],\n                }],\n            }}\n            options={{\n                title: {\n                    display: true,\n                    text: 'Cases Per Million'\n                }\n\n            }}\n        />\n    )\n\n\n    return (\n        <div className={styles.container}>\n            {data.testsPerOneMillion !== 0 ?\n                <div className={styles.container}>\n                    <div className={styles.container}>\n                        {TotalCases}\n                    </div>\n                    <div className={styles.container}>\n                        {data.testsPerOneMillion === 0 ? null : CasesPerMillion}\n                    </div>\n                </div> : TotalCases\n            }\n        </div>\n    )\n}\nexport default Chart;","import React from 'react';\nimport{fetchData} from './api';\nimport {Header,CountryList,Cards,Chart} from './components';\nimport styles from './App.module.css'\n\nclass App extends React.Component{\n  state = {\n    data:{},\n    country:\"world\"\n  }\n  componentDidMount = async()=>{\n    const fetchedData = await fetchData(this.state.country).then(res => res.data)\n    this.setState({data: fetchedData})\n  }\n  handleCountryName = async (country) =>{\n    const fetchedData = await fetchData(country).then(res => res.data)\n    this.setState({data: fetchedData,country:country})\n  }\n\n  render(){\n    const {country,data} = this.state\n    console.log(this.state)\n    return(\n      <div className={styles.container}>\n      <Header/>\n      <CountryList handleCountryName={this.handleCountryName}/>\n      <Cards data={data} country={country}/>\n      <Chart data={data} country={country}/>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\",\"newContainer\":\"Chart_newContainer__3-IqK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Card_container__3Egd-\",\"card\":\"Card_card__1XdBb\",\"infected\":\"Card_infected__11gc_\",\"recovered\":\"Card_recovered__v9icT\",\"deaths\":\"Card_deaths__3M97h\",\"active\":\"Card_active__3VzuC\"};"],"sourceRoot":""}